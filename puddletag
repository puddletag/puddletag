#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Main puddletag executable"""

import os
import sys
from optparse import OptionParser


def _migrate_checkstates() -> None:
    """PyQt6 Migration: Change int-based tri-state to boolean"""
    from puddlestuff.puddleobjects import PuddleConfig
    cparser = PuddleConfig()
    for section, key in (
        ('autonumbering', 'separator'),
        ('autonumbering', 'restart'),
        ('autonumbering', 'count_by_group'),
        ('playlist', 'extinfo'),
        ('playlist', 'reldir'),
        ('playlist', 'windows_separator'),
    ):
        old_value = cparser.get(section, key, None)
        if old_value is not None and isinstance(old_value, int):
            cparser.set(section, key, bool(old_value))


def migrate_settings() -> None:
    """Apply any required setting/configuration migrations"""
    from puddlestuff.constants import CONFIGDIR, SAVEDIR
    for dirpath in [CONFIGDIR, SAVEDIR]:
        if not os.path.exists(dirpath):
            os.makedirs(dirpath)

    _migrate_checkstates()


def check_libs():
    """Check for required libs.

    If some not found, show/print a message.
    Exit if requirements aren't met."""
    _libs = [('mutagen', '(usually python3-mutagen or just mutagen)',
              'http://code.google.com/p/mutagen/'),
             ('configobj', '(usually python3-configobj)',
              'http://code.google.com/p/configobj/'),
             ('pyparsing', '(python3-pyparsing or python3-parsing in most distros)',
              'https://github.com/pyparsing/pyparsing/'),
             ('PyQt6', '(python3-pyqt6 usually)',
              'http://www.riverbankcomputing.co.uk/software/pyqt/intro')]

    found = True
    errors = []
    msg = "Error: The %s module wasn't found. Please check that it's installed " \
          "properly. Download it from your distro's repository" \
          " %s or directly from %s \n"
    for lib in _libs:
        try:
            __import__(lib[0])
        except ImportError:
            print((msg % lib))
            errors.append(msg % lib)
            found = False

    msg = "Error: %s module wasn't found. %s. Please check that it's " \
          "installed properly. You can download it from your distro's " \
          "repository (%s), or download directly from %s.\n"

    try:
        if not found:
            from PyQt6.QtWidgets import QApplication, QMessageBox
            app = QApplication([])
            QMessageBox.critical(None, 'puddletag', '\n'.join(errors))
    except:
        pass

    if not found:
        sys.exit(1)


def init(options, qapp):
    """Initializes things that need to be initialized.

    Parses command line options. Loads Translations. Sets fontsize."""
    from puddlestuff.logger import init_logger

    if options.version:
        # It's already printed.
        exit()

    if options.debug:
        init_logger(logging.DEBUG)
    else:
        init_logger(logging.WARN)

    load_language(qapp, options.langfile)

    if options.fontsize:
        try:
            size = int(options.fontsize)
            font = qapp.font()
            font.setPointSize(size)
            app.setFont(font)
        except IndexError:
            logging.error('No fontsize specified.')
        except ValueError:
            logging.error('Invalid fontsize specified.')


def load_language(qapp, langfile=None):
    """Loads the language file to be used by puddletag.

    app => QApplication object.
    langfile => If None, then the last option the user chose will be used.
                Should be a path to a Qt translation file (.qm)."""
    TRANSDIR = puddlestuff.constants.TRANSDIR

    global translators  # Needs to live throughout app.
    translators = []

    if langfile:
        if not langfile.endswith('.qm'):
            print(translate('Defaults', 'Invalid translation file.'))
            langargs = None
        else:
            langargs = os.path.basename(langfile), os.path.dirname(langfile)
    else:
        langargs = None

    if not langargs:
        cparser = PuddleConfig()
        lang = cparser.get('main', 'lang', 'auto')
        langs = get_languages([TRANSDIR])

        if lang != 'auto':
            if lang in langs:
                f = langs[lang]
                langargs = os.path.basename(f), os.path.dirname(f)

        if not langargs and lang != 'default':
            for locale in QLocale.system().uiLanguages():
                if locale == 'en':
                    break
                if locale in langs:
                    f = langs[locale]
                    langargs = os.path.basename(f), os.path.dirname(f)
                    break

    if langargs and langargs != 'default':
        translator = QTranslator()
        translator.load("qt_" + QLocale.system().name(),
                        QLibraryInfo.path(QLibraryInfo.LibraryPath.TranslationsPath))
        translators.append(translator)

        if 'puddletag_' in langargs[0]:
            translator = QTranslator()
            locale = langargs[0][len('puddletag_'):-len('.qm')]
            translator.load("qt_" + locale,
                            QLibraryInfo.path(QLibraryInfo.LibraryPath.TranslationsPath))
            print("Locale: " + locale)
            translators.append(translator)

        translator = QTranslator()
        if translator.load(*langargs):
            translators.append(translator)

    elif langargs != 'default':
        translator = QTranslator()
        translator.load("qt_" + QLocale.system().name(),
                        QLibraryInfo.path(QLibraryInfo.LibraryPath.TranslationsPath))
        print("Locale: " + str(QLocale.system().name()))
        translators.append(translator)

    else:
        print("Loading default (ie. no) translation.")

    for t in reversed(translators):
        qapp.installTranslator(t)
    puddlestuff.constants.trans_strings()
    puddlestuff.puddleobjects.trans_imagetypes()


def parse_cmd_options():
    usage = "Usage: %prog [options] [directory path]"
    parser = OptionParser(usage=usage)

    parser.add_option("--langfile", dest="langfile",
                      default='',
                      help="Path to a translation (.qm) file.", metavar="LANGFILE")
    parser.add_option("--fontsize", type='float',
                      dest="fontsize", help="Default fontsize to use (in points).")
    parser.add_option("-d", "--debug", action="store_true",
                      dest="debug", default=False, help="Show (useless) debug messages.")
    parser.add_option("-v", "--version", action="store_true",
                      dest="version", default=False, help="Show version info and exit.")

    return parser.parse_args()


def print_info():
    """Print program info."""
    from puddlestuff import version_string, changeset
    if changeset:
        print(translate('Defaults', "puddletag Version: {}, Changeset: {}")
              .format(version_string, changeset))
    else:
        print(translate('Defaults', 'puddletag Version: {}'
              .format(version_string)))


def splashscreen():
    from PyQt6.QtGui import QFont, QPainter, QPixmap
    from PyQt6.QtWidgets import QSplashScreen
    from puddlestuff import version_string

    pixmap = QPixmap('icons:puddlelogo.png')

    # Add version
    painter = QPainter(pixmap)
    font = QFont()
    font.setPointSize(14)
    font.setBold(True)
    painter.setFont(font)
    painter.drawText(330, 115, 'v' + version_string)
    painter.end()

    return QSplashScreen(pixmap)


class StdOut(object):
    """Class to redirect stdout/in/err."""

    def __init__(self, old_write, new_write):
        """old_write should be the original sys.stdout.out
        new_write is a function is what sys.stdout.out will be replaced with.

        Text will be passed to both functions."""
        self._old_write = old_write
        self._new_write = new_write

    def write(self, text):

        self._old_write(text)
        try:
            self._new_write(text)
        except:
            pass


if __name__ == '__main__':
    check_libs()
    from PyQt6.QtWidgets import QApplication
    from PyQt6.QtCore import (pyqtRemoveInputHook, QTranslator,
                              QLibraryInfo, QLocale)
    import logging

    pyqtRemoveInputHook()

    # Load puddletag modules.
    import puddlestuff.resource  # Needs to be first as other modules use it.
    import puddlestuff.constants

    migrate_settings()
    from puddlestuff.puddleobjects import get_icon, get_languages, PuddleConfig
    from puddlestuff.translations import translate

    # Init.
    print_info()
    app = QApplication(sys.argv)
    options, filenames = parse_cmd_options()
    init(options, app)

    # Depends on init being called first.
    from puddlestuff.puddletag import MainWin
    from puddlestuff.puddlesettings import load_gen_settings

    app.setWindowIcon(get_icon(None, "appicon.svg"))
    app.setDesktopFileName("puddletag")
    app.setOrganizationName("Puddle Inc.")
    app.setApplicationName("puddletag")

    splash = splashscreen()
    splash.show()
    app.processEvents()
    win = MainWin()
    splash.close()
    win.setVisible(True)
    app.processEvents()

    # Check if dirnames passed on command line.
    if filenames:
        for filename in filenames:
            if not os.path.exists(filename):
                print('Directory or file %s does not exist.' % filename)
                sys.exit(1)
        win.openFiles(filenames, False)
    elif load_gen_settings([('&Load last folder at startup', False)])[0][1]:
        if win._lastdir and os.path.exists(win._lastdir[0]):
            win.openDir(win._lastdir[0], False)
    app.exec()
