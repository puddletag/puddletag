# -*- coding: utf-8 -*-
import sys
import tempfile
from os import walk, listdir, path
from subprocess import call

import puddlestuff.resource
import puddlestuff.findfunc as findfunc
import puddlestuff.loadshortcuts as loadshortcuts
from puddlestuff.puddleobjects import PuddleConfig

usage = '''Usage: python update_translation.py [-h] [-q] [language]

Options:
    language: Locale of the language to be created eg. en_ZA, rus, fr_BE.
    -q Quiet mode (only error messages will be shown).
    -h Show this message.'''


def parse_dialogs():
    from puddlestuff.mainwin import (tagpanel, artwork, dirview,
                                     filterwin, storedtags, logdialog)
    import puddlestuff.masstag.dialogs as masstag
    import puddlestuff.webdb as webdb
    import puddlestuff.mainwin.action_dialogs as action_dialogs

    def tr(s):
        s = s.replace('"', r'\"')
        return 'translate("Dialogs", "%s")' % s

    dialog_strings = []
    controls = [z.control for z in [tagpanel, artwork, dirview, filterwin,
                                    webdb, storedtags, logdialog, masstag]]

    controls.extend(action_dialogs.controls)

    return sorted([tr(c[0]) for c in controls])


def parse_functions():
    func_strings = []

    def tr(s):
        return 'translate("Functions", "%s")' % s.replace('"', r'\"')

    for f in findfunc.functions:
        try:
            x = findfunc.Function(f)
            func_strings.append(tr(x.info[1]))
            func_strings.append(tr(x.funcname))
            for controls in x._getControls(None):
                del (controls[1])
                func_strings.extend(list(map(tr, controls)))
        except AttributeError:
            pass

    return sorted(func_strings)


def parse_shortcuts():
    def tr(s):
        s = s.replace('"', r'\"')
        return 'translate("Menus", "%s")' % s

    f = tempfile.NamedTemporaryFile('rb+')
    fn = f.name

    loadshortcuts.check_file(fn, 'data:./shortcuts')
    cparser = PuddleConfig(fn)

    action_strings = []
    setting = cparser.data
    for section in cparser.sections():
        if section.startswith('shortcut'):
            values = dict([(str(k), v) for k, v in setting[section].items()])
            action_strings.append(tr(values['name']))
            if 'tooltip' in values:
                action_strings.append(tr(values['tooltip']))

    f.close()
    menus = tempfile.NamedTemporaryFile('rb+')
    fn = menus.name
    loadshortcuts.check_file(fn, 'data:./menus')
    cparser = PuddleConfig(fn)

    action_strings.extend(list(map(tr, cparser.data['menu'])))
    menus.close()

    return sorted(action_strings)


def write_translations():
    f = open('puddlestuff/translations.py', 'r+')
    out = []
    for i, l in enumerate(f.readlines()):
        out.append(l)
        if 'translate("Menus", "Sort &By")' in l:
            break

    f.seek(len(''.join(out)))
    f.write('\n# Below here is generated by `update_translation.py`')
    f.write('\n    ' + '\n    '.join(parse_shortcuts()))
    f.write('\n\n    # Functions\n    ' + '\n    '.join(parse_functions()))
    f.write('\n\n    # Dialogs\n    ' + '\n    '.join(parse_dialogs()))
    f.write('\n')
    f.truncate()
    f.close()

def update_pro_file(new_lang):
    source_files = []
    for dirpath, dirnames, filenames in walk('.'):
        source_files.extend(
            [path.join(dirpath[2:], filename) for filename in filenames if filename.endswith('.py')]
        )
    source_files.sort()

    translation_path = path.join('puddlestuff', 'translations')
    translation_files = [path.join(translation_path, filename) for filename in listdir(translation_path) if filename.endswith('.ts')]

    new_filename = None
    if new_lang:
        new_filename = path.join('puddlestuff', 'translations', 'puddletag_%s.ts' % new_lang)
        if new_filename not in translation_files:
            translation_files.append(new_filename)

    translation_files.sort()

    with open('puddletag.pro', 'w') as f:
        f.write('SOURCES = %s\n' % ' '.join(sorted(source_files)))
        f.write('TRANSLATIONS = %s\n' % ' '.join(sorted(translation_files)))

    return new_filename

verbose = True
new_lang = None

for arg in sys.argv[1:]:
    if arg == '-q':
        verbose = False
    elif arg in ('--help', '-h'):
        print(usage)
        sys.exit(0)
    else:
        new_lang = arg
        break


if verbose:
    print('Updating `translations.py` from menu-/shortcut-/function-/dialog-sourcecode...')
write_translations()

if verbose:
    print('Updating `puddletag.pro` with location of source- and translation-files...')
ts_file = update_pro_file(new_lang)

if verbose:
    print('Updating translation keys in `*.ts` files from application sourcecode...')
try:
    call(['pylupdate5', *(['-verbose'] if verbose else []), '-noobsolete', 'puddletag.pro'])
except OSError:
    print('Error: pylupdate5 is not installed.')
    sys.exit(2)

if verbose:
    if not ts_file:
        ts_file = path.join('puddlestuff', 'translations', 'puddletag_*.ts')
    print('\nOpen {0} in Qt Linguist in order to edit the translations.\n    $ linguist {0}'.format(ts_file))
